J=ncol(factory), # number of factories
xindex=6  # index for generated quantities block (not important in our case)
)
{sink("/dev/null"); sep_model <- rstan::sampling(sm, data=stan_data)
sink();}
#sep_model
sep_model
{sink("/dev/null"); pool_sm <- rstan::stan_model(file="pooled_model.stan")
sink();}
stan_data_pooled <- list(
y=factory, # the observations
N=nrow(factory), # number of measurements
J=ncol(factory) # number of factories
)
{sink("/dev/null"); pooled_model <- rstan::sampling(pool_sm, data=stan_data_pooled)
sink();}
#pooled_model
{sink("/dev/null"); hie_sm <- rstan::stan_model(file="hierarchical.stan")
sink();}
hie_data <- list(y=factory,
N=nrow(factory),
J=ncol(factory),
xindex=6)  # index for generated quantities block (not important here)
{sink("/dev/null"); hie_model <- rstan::sampling(hie_sm, data=hie_data)
sink();}
#hie_model
sep_loo <- loo(sep_model, r_eff=NA)
sep_loo$estimates
pooled_loo <- loo(pooled_model, r_eff=NA)
pooled_loo$estimates
hie_loo <- loo(hie_model, r_eff=NA)
hie_loo$estimates
sep_loo$pointwise[,"influence_pareto_k"]
pooled_loo$pointwise[,"influence_pareto_k"]
hie_loo$pointwise[,"influence_pareto_k"]
pooled_loo
sep_loo
hie_loo
| Separate | Pooled | Hierarchical |
|----------|--------|--------------|
| 2.1      | 9.9    | 5.7          |
library(aaltobda)
library(loo)
data("factory")
library(rstan)
{sink("/dev/null"); sm <- rstan::stan_model(file="separate_model.stan")
sink();}
stan_data <- list(
y=factory, # the observations
N=nrow(factory), # number of measurements
J=ncol(factory), # number of factories
xindex=6  # index for generated quantities block (not important in our case)
)
{sink("/dev/null"); sep_model <- rstan::sampling(sm, data=stan_data)
sink();}
#sep_model
{sink("/dev/null"); pool_sm <- rstan::stan_model(file="pooled_model.stan")
sink();}
stan_data_pooled <- list(
y=factory, # the observations
N=nrow(factory), # number of measurements
J=ncol(factory) # number of factories
)
{sink("/dev/null"); pooled_model <- rstan::sampling(pool_sm, data=stan_data_pooled)
sink();}
#pooled_model
{sink("/dev/null"); hie_sm <- rstan::stan_model(file="hierarchical.stan")
sink();}
hie_data <- list(y=factory,
N=nrow(factory),
J=ncol(factory),
xindex=6)  # index for generated quantities block (not important here)
{sink("/dev/null"); hie_model <- rstan::sampling(hie_sm, data=hie_data)
sink();}
#hie_model
pairs(hie_model)
par("mar")
pairs(hie_model)
par(mar=c(1,1,1,1))
pairs(hie_model)
par(mar=c(5.1, 4.1, 4.1, 2.1))
pairs(sep_model)
hist(sep_loo$pointwise[,"influence_pareto_k"], breaks = 50, main="Separate Model: k-values",
xlab="k")  # change number of bins to 50
pairs(hie_model, pars = c("y", "x[1]", "lp__"), las = 1) # below the diagonal
pairs(hie_model, pars = c("log_lik", "lp__"), las = 1) # below the diagonal
help('pareto-k-diagnostic')
sep_loo <- loo(sep_model, r_eff=NA)
sep_loo$estimates
plot(
sep_loo,diagnostic = c("k", "n_eff"),label_points = FALSE,main = "PSIS diagnostic plot")
plot(sep_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Separate Model")
pooled_loo <- loo(pooled_model, r_eff=NA)
pooled_loo$estimates
plot(sep_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Separate Model")
plot(sep_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Separate Model")
plot(sep_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Separate Model")
plot(pooled_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Pooled Model")
{sink("/dev/null"); sm <- rstan::stan_model(file="separate_model.stan")
sink();}
stan_data <- list(
y=factory, # the observations
N=nrow(factory), # number of measurements
J=ncol(factory), # number of factories
xindex=6  # index for generated quantities block (not important in our case)
)
{sink("/dev/null"); sep_model <- rstan::sampling(sm, data=stan_data)
sink();}
#sep_model
{sink("/dev/null"); pool_sm <- rstan::stan_model(file="pooled_model.stan")
sink();}
stan_data_pooled <- list(
y=factory, # the observations
N=nrow(factory), # number of measurements
J=ncol(factory) # number of factories
)
{sink("/dev/null"); pooled_model <- rstan::sampling(pool_sm, data=stan_data_pooled)
sink();}
#pooled_model
{sink("/dev/null"); hie_sm <- rstan::stan_model(file="hierarchical.stan")
sink();}
hie_data <- list(y=factory,
N=nrow(factory),
J=ncol(factory),
xindex=6)  # index for generated quantities block (not important here)
{sink("/dev/null"); hie_model <- rstan::sampling(hie_sm, data=hie_data)
sink();}
#hie_model
sep_loo <- loo(sep_model, r_eff=NA)
sep_loo$estimates
plot(sep_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Separate Model")
pooled_loo <- loo(pooled_model, r_eff=NA)
pooled_loo$estimates
plot(pooled_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Pooled Model")
hie_loo <- loo(hie_model, r_eff=NA)
hie_loo$estimates
plot(hie_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Hierarchical Model")
hie_loo
pooled_loo
sep_loo
hist(sep_loo$pointwise[,"influence_pareto_k"], breaks = 50, main="Separate Model: k-values",
xlab="k")  # change number of bins to 50
hist(sep_loo$pointwise[,"influence_pareto_k"], breaks = 40,
main="Separate Model: k-values",
xlab="k")
hist(pooled_loo$pointwise[,"influence_pareto_k"], breaks = 40,
main="Pooled Model: k-values",
xlab="k")
pooled_loo
hist(pooled_loo$pointwise[,"influence_pareto_k"], breaks = 40,
main="Pooled Model: k-values",
xlab="k")
hist(hie_loo$pointwise[,"influence_pareto_k"], breaks = 40,
main="Hierarchical Model: k-values",
xlab="k")
hie_loo
loo_compare(x=list(sep_loo, pooled_loo, hie_loo))
sum(sep_loo$pointwise[,"influence_pareto_k"]<0.5)
sum(sep_loo$pointwise[,"influence_pareto_k"]>0.5 & sep_loo$pointwise[,"influence_pareto_k"]<=0.7)
sum(sep_loo$pointwise[,"influence_pareto_k"]>0.7 & sep_loo$pointwise[,"influence_pareto_k"]<=1)
sum(sep_loo$pointwise[,"influence_pareto_k"]>1)
sum(pooled_loo$pointwise[,"influence_pareto_k"]<=0.5)
sum(pooled_loo$pointwise[,"influence_pareto_k"]>0.5 & pooled_loo$pointwise[,"influence_pareto_k"]<=0.7)
sum(pooled_loo$pointwise[,"influence_pareto_k"]>0.7 & pooled_loo$pointwise[,"influence_pareto_k"]<=1)
sum(pooled_loo$pointwise[,"influence_pareto_k"]>1)
sum(hie_model$pointwise[,"influence_pareto_k"]<=0.5)
sum(hie_loo$pointwise[,"influence_pareto_k"]<=0.5)
sum(hie_loo$pointwise[,"influence_pareto_k"]>0.5 & hie_loo$pointwise[,"influence_pareto_k"]<=0.7)
sum(hie_loo$pointwise[,"influence_pareto_k"]>0.7 & hie_loo$pointwise[,"influence_pareto_k"]<=1)
sum(hie_loo$pointwise[,"influence_pareto_k"]>1)
hie_loo
sep_model$`log_lik
''
``
`
sep_model$log_lik
sep_model
sep_model$`log_lik[10]`
sep_draws <- as.data.frame(sep_model)
sep_draws$`log_lik[10]`
sep_draws$`log_lik[i]`
i=0
sep_draws$`log_lik[i]`
i=2
sep_draws$`log_lik[i]`
sep_draws[,"log_lik[i]"]
sep_draws["log_lik[i]"]
sep_draws[log_lik[10]]
sep_draws["log_lik[10]"]
sep_draws["log_lik[" + i + "]"]
sep_draws[paste("log_lik[", i, "]")]
paste("log_lik[", i, "]")
sep_draws[paste("log_lik[", i, "]", sep="")]
log(mean(sep_draws[paste("log_lik[", i, "]", sep="")]))
mean(sep_draws[paste("log_lik[", i, "]", sep="")])
sep_draws[paste("log_lik[", i, "]", sep="")][:10]
sep_draws[paste("log_lik[", i, "]", sep="")][1:10]
colNames(sep_draws[paste("log_lik[", i, "]", sep="")])
colnames(sep_draws[paste("log_lik[", i, "]", sep="")])
sep_draws[paste("log_lik[", i, "]", sep="")][colnames(sep_draws[paste("log_lik[", i, "]", sep="")])]
sep_draws[paste("log_lik[", i, "]", sep="")]
typeof(sep_draws[paste("log_lik[", i, "]", sep="")])
unlist(sep_draws[paste("log_lik[", i, "]", sep="")])
mean(unlist(sep_draws[paste("log_lik[", i, "]", sep="")]))
log(mean(unlist(sep_draws[paste("log_lik[", i, "]", sep="")])))
exp(mean(unlist(sep_draws[paste("log_lik[", i, "]", sep="")])))
lpd <- function(N, S, stan_model) {
stan_draws <- as.data.frame(sep_model)
lpd_val <- 0
for (i in 1:N) {
log_lik <- stan_draws[paste("log_lik[", i, "]", sep="")]
exp_mean <- exp(mean(unlist(log_lik)))
lpd_val <- lpd_val + exp_mean
}
return (lpd_val)
}
lpd <- function(N, stan_model) {
stan_draws <- as.data.frame(sep_model)
lpd_val <- 0
for (i in 1:N) {
log_lik <- stan_draws[paste("log_lik[", i, "]", sep="")]
exp_mean <- exp(mean(unlist(log_lik)))
lpd_val <- lpd_val + exp_mean
}
return (lpd_val)
}
lpd(30, sep_model)
sep_loo$estimates
typeof(sep_loo$estimates)
sep_loo$estimates["p_loo",]
sep_loo$estimates["p_loo","Estimate"]
lpd <- function(N, stan_model) {
stan_draws <- as.data.frame(sep_model)
lpd_val <- 0
for (i in 1:N) {
log_lik <- stan_draws[paste("log_lik[", i, "]", sep="")]
log_mean <- log(mean(exp(unlist(log_lik))))
lpd_val <- lpd_val + log_mean
}
return (lpd_val)
}
lpd_sep <- lpd(30, sep_model)
lpd_sep
sep_loo$estimates
sep_loo$estimates["elpd_loo", "Estimate"]
elpd_loo_sep <- sep_loo$estimates["elpd_loo", "Estimate"]
p_eff <- lpd_sep - elpd_loo_sep
p_eff
sep_loo$estimates["p_loo", "Estimate"]
lpd_pool <- lpd(30, pooled_model)
lpd_pool
elpd_loo_pool <- pooled_loo$estimates["elpd_loo", "Estimate"]
p_eff <- lpd_pool - elpd_loo_pool
p_eff
pooled_loo$estimates["p_loo", "Estimate"]
pooled_loo
lpd_hie <- lpd(30, hie_model)
lpd_hie
elpd_loo_hie <- hie_loo$estimates["elpd_loo", "Estimate"]
p_eff <- lpd_hie - elpd_loo_hie
p_eff
lpd <- function(N, stan_model) {
stan_draws <- as.data.frame(stan_model)
lpd_val <- 0
for (i in 1:N) {
log_lik <- stan_draws[paste("log_lik[", i, "]", sep="")]
log_mean <- log(mean(exp(unlist(log_lik))))
lpd_val <- lpd_val + log_mean
}
return (lpd_val)
}
lpd_pool <- lpd(30, pooled_model)
lpd_pool
elpd_loo_pool <- pooled_loo$estimates["elpd_loo", "Estimate"]
p_eff <- lpd_pool - elpd_loo_pool
p_eff
elpd_loo_hie <- hie_loo$estimates["elpd_loo", "Estimate"]
p_eff <- lpd_hie - elpd_loo_hie
p_eff
pooled_loo$estimates["p_loo", "Estimate"]
hie_loo$estimates["p_loo", "Estimate"]
lpd_hie <- lpd(30, hie_model)
lpd_hie
elpd_loo_hie <- hie_loo$estimates["elpd_loo", "Estimate"]
p_eff <- lpd_hie - elpd_loo_hie
p_eff
plot(hie_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Hierarchical Model")
sep_loo$pointwise[,"influence_pareto_k"]
plot(pooled_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Pooled Model")
plot(sep_loo,diagnostic = c("k", "n_eff"),
label_points = FALSE,main = "PSIS diagnostic plot for Separate Model")
hie_loo
sep_loo
library(aaltobda)
data("factory")
utility()
y_pred <- c(123.80, 85.23, 70.16, 80.57, 84.91)
y_pred[y_pred>85]
utility <- function(draws) {
saleable_profit <- 200 * length(draws[draws>=85])
total_cost <- 106 * length(draws)
return ((saleable_profit-total_cost) / length(draws))
}
utility(y_pred)
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment9.yml", sep="")
set_assignment(assignment_path)
mark_my_assignment()
factory
rstan:::rstudio_stanc("/data/aalto/1stSemester/BayesianDataAnalysis/assignment9/hierarchical.stan")
rstan:::rstudio_stanc("/data/aalto/1stSemester/BayesianDataAnalysis/assignment9/hierarchical.stan")
rstan:::rstudio_stanc("/data/aalto/1stSemester/BayesianDataAnalysis/assignment9/hierarchical.stan")
rstan:::rstudio_stanc("/data/aalto/1stSemester/BayesianDataAnalysis/assignment9/hierarchical.stan")
{sink("/dev/null"); hie_sm <- rstan::stan_model(file="hierarchical.stan")
sink();}
hie_data <- list(y=factory,
N=nrow(factory),
J=ncol(factory),
xindex=6)  # index for generated quantities block (not important here)
{sink("/dev/null"); hie_model <- rstan::sampling(hie_sm, data=hie_data)
sink();}
hie_model
draws <- as.data.frame(hie_model)
draws$`ypred[1]`
utility(draws$`ypred[1]`)
utility(draws$"ypred["+1+"]")
utility(draws$["ypred["+1+"]"])
utility(draws["ypred["+1+"]"])
utility(draws["ypred["+"1"+"]"])
utility(draws$`ypred[i]`)
i=2
utility(draws$`ypred[i]`)
utility(draws$`ypred[{i}]`)
names(draws)
names(draws)[names(draws) == "ypred["+i+""]
names(draws)[names(draws) == "ypred["+i+"]"]
names(draws)[names(draws) == "ypred["+toString(i)+"]"]
utility(draws[paste("ypred[", i, "]", sep="")])
draws <- as.data.frame(hie_model)
utilities <- c()
for (i in 1:6) {
utilities[i] <- utility(draws[paste("ypred[", i, "]", sep="")])
}
sort(utilities, index.return=TRUE)$ix
utilities
draws <- as.data.frame(hie_model)
utilities <- c()
for (i in 1:6) {
utilities[i] <- utility(draws[paste("ypred[", i, "]", sep="")])
}
utilities
# Sort utilities and get the indices
sort(utilities, index.return=TRUE)$ix
rstan:::rstudio_stanc("/data/aalto/1stSemester/BayesianDataAnalysis/assignment9/hierarchical.stan")
{sink("/dev/null"); hie_sm <- rstan::stan_model(file="hierarchical.stan")
sink();}
hie_data <- list(y=factory,
N=nrow(factory),
J=ncol(factory),
xindex=6)  # index for generated quantities block (not important here)
{sink("/dev/null"); hie_model <- rstan::sampling(hie_sm, data=hie_data)
sink();}
utility <- function(draws) {
saleable_profit <- 200 * length(draws[draws>=85])
total_cost <- 106 * length(draws)
return ((saleable_profit-total_cost) / length(draws))
}
draws <- as.data.frame(hie_model)
utilities <- c()
for (i in 1:6) {
utilities[i] <- utility(draws[paste("ypred[", i, "]", sep="")])
}
utilities
# Sort utilities and get the indices
sort(utilities, index.return=TRUE)$ix
hie_model
utility(draws$ypred7)
draws$ypred7
utility(draws$`ypred[6]`)
utility(draws[paste("ypred[", i, "]", sep="")])
draws["ypred[2]"]
typeof(draws["ypred[2]"])
typeodf(draws$`ypred[6]`)
typeof(draws$`ypred[6]`)
draws$`ypred[6]`
draws["ypred[2]"]
names(draws["ypred[2]"])
draws["ypred[2]"]["ypred[2]"]
sum(draws["ypred[2]"])
sum(draws$`ypred[2]`)
length(draws$`ypred[2]`)
length(draws["ypred[2]"])
length(draws["ypred[2]"]$`ypred[2]`)
nrow(draws["ypred[2]"])
nrow(draws$`ypred[2]`)
length(as.vector(draws["ypred[2]"]))
length(as.data.frame.vector(draws["ypred[2]"]))
as.data.frame.vector(draws["ypred[2]"])
d1 <- draws["ypred[2]"]
d1
d1[d1>=85]
length(d1[d1>=85])
length(d1)
length(d1[d1>=0])
utility <- function(draws) {
saleable_profit <- 200 * length(draws[draws>=85])
total_cost <- 106 * length(draws[draws>=0])
return ((saleable_profit-total_cost) / length(draws))
}
draws <- as.data.frame(hie_model)
utilities <- c()
for (i in 1:6) {
utilities[i] <- utility(draws[paste("ypred[", i, "]", sep="")])
}
utilities
# Sort utilities and get the indices
sort(utilities, index.return=TRUE)$ix
utility(draws$`ypred[2]`)
utility(draws["ypred[2]"])
d1 <-draws["ypred[2]"]
length(d1)
length(d1[d1>=0])
utility <- function(draws) {
saleable_profit <- 200 * length(draws[draws>=85])
total_cost <- 106 * length(draws[draws>=0])
return ((saleable_profit-total_cost) / length(draws[draws>=0]))
}
draws <- as.data.frame(hie_model)
utilities <- c()
for (i in 1:6) {
utilities[i] <- utility(draws[paste("ypred[", i, "]", sep="")])
}
utilities
# Sort utilities and get the indices
sort(utilities, index.return=TRUE)$ix
utility(draws$ypred7)
utility(draws$ypred7)
library(rstan)
library(knitr)
library(dplyr)
library(loo)
# read the match performance of each team in group stage
# have make the data to look like factory data
data <- read.csv(file = 'match_performance_group_region.csv')
library(rstan)
library(knitr)
library(dplyr)
library(loo)
# read the match performance of each team in group stage
# have make the data to look like factory data
data <- read.csv(file = 'data/match_performance_group_region.csv')
library(rstan)
library(knitr)
library(dplyr)
library(loo)
# read the match performance of each team in group stage
# have make the data to look like factory data
data <- read.csv(file = './data/match_performance_group_region.csv')
library(rstan)
library(knitr)
library(dplyr)
library(loo)
# read the match performance of each team in group stage
# have make the data to look like factory data
data <- read.csv(file = 'match_performance_group_region.csv')
setwd("/data/aalto/1stSemester/BayesianDataAnalysis/project/git_repo")
library(rstan)
library(knitr)
library(dplyr)
library(loo)
# read the match performance of each team in group stage
# have make the data to look like factory data
data <- read.csv(file = 'match_performance_group_region.csv')
setwd("/data/aalto/1stSemester/BayesianDataAnalysis/project/git_repo")
library(rstan)
library(knitr)
library(dplyr)
library(loo)
# read the match performance of each team in group stage
# have make the data to look like factory data
data <- read.csv(file = './data/match_performance_group_region.csv')
nrow(data)
ncol(data)
data
as.vector(as.matrix(data))
variable <- c("radiant_score", "dire_score", "radiant_xp_adv", "radiant_gold_adv",
"hero_damage", "hero_healing", "obs_placed", "kda")
description <- c("Final score for the Radiant team(number of kills on Radiant)",
"Final score for the Dire team (number of kills on Dire)",
"Array of the Radiant experience advantage at each \\
minute in the game. A negative number means that \\
Radiant is behind, and thus it is their experience disadvantage.",
"Array of the Radiant gold advantage at each minute in the game. \\
A negative number means that Radiant is behind, and thus it is \\
their gold disadvantage.", "Hero Damage Dealt (user specific)",
"Hero Healing Done (user specific)",
"Total number of observer wards placed (user specific)",
"kda (ratio of kills/deaths/assists) (user specific)")
knitr::kable(data.frame(variable, description), format = 'pipe', padding=100,
col.names = c("Variable Names", "Description"))
